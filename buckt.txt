provider "aws" {
  region = var.aws_region
}

variable "aws_region" {
  description = "AWS region where resources will be created"
  type        = string
  default     = "us-east-1"
}

variable "aws_account_id" {
  description = "AWS Account ID"
  type        = string
  # Set a default value if you have a specific account ID you want to use by default
  default     = "123456789012"
}

variable "lambda_execution_role_name" {
  description = "Name of the IAM role for Lambda execution"
  type        = string
  default     = "lambda_execution_role"
}

variable "lambda_execution_policy_names" {
  description = "List of IAM policy names for Lambda execution"
  type        = list(string)
  default     = ["policy1", "policy2", "policy3"]
}

resource "aws_iam_role" "lambda_execution_role" {
  name = var.lambda_execution_role_name
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}

resource "aws_iam_policy" "lambda_execution_policy" {
  count       = length(var.lambda_execution_policy_names)
  name        = var.lambda_execution_policy_names[count.index]
  description = "Policy for Lambda execution role"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
        Resource = "arn:aws:logs:*:*:*"
      }
      # Add additional permissions as needed for your Lambda function
    ]
  })
}

resource "aws_iam_role_policy_attachment" "lambda_execution_attachment" {
  count         = length(var.lambda_execution_policy_names)
  policy_arn    = aws_iam_policy.lambda_execution_policy[count.index].arn
  role          = aws_iam_role.lambda_execution_role.name
}

output "lambda_execution_role_arn" {
  value = aws_iam_role.lambda_execution_role.arn
}
==========================================================

provider "aws" {
  region = "us-east-1"  # Set your desired AWS region
}

variable "lambda_function_name" {
  description = "Name of the Lambda function"
  type        = string
  default     = "my_lambda_function"
}

variable "s3_bucket_name" {
  description = "Name of the S3 bucket to trigger the Lambda function"
  type        = string
  default     = "my-s3-bucket"
}

resource "aws_lambda_function" "my_lambda_function" {
  function_name    = var.lambda_function_name
  runtime          = "python3.8"  # Set your desired runtime
  handler          = "index.handler"  # Set your Lambda function handler
  role             = aws_iam_role.lambda_execution_role.arn
  filename         = "path/to/your/lambda_function.zip"  # Specify the path to your Lambda function code ZIP file
  source_code_hash = filebase64("path/to/your/lambda_function.zip")  # Calculate the base64-encoded MD5 hash of your ZIP file

  environment {
    variables = {
      key1 = "value1"
      key2 = "value2"
    }
  }
}

resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_s3_bucket" "my_s3_bucket" {
  bucket = var.s3_bucket_name
  acl    = "private"
}

resource "aws_lambda_permission" "s3_trigger_permission" {
  statement_id  = "AllowS3Invocation"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.my_lambda_function.function_name
  principal     = "s3.amazonaws.com"

  source_arn = aws_s3_bucket.my_s3_bucket.arn
}

resource "aws_s3_bucket_notification" "lambda_function_trigger" {
  bucket = aws_s3_bucket.my_s3_bucket.id

  lambda_function {
    lambda_function_arn = aws_lambda_function.my_lambda_function.arn
    events             = ["s3:ObjectCreated:*"]
  }
}
=======================================================