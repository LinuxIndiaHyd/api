provider "aws" {
  region = var.aws_region
}

resource "aws_servicecatalog_portfolio" "my_portfolio" {
  name          = var.portfolio_name
  display_name  = var.portfolio_display_name
  description   = var.portfolio_description
}

resource "aws_servicecatalog_portfolio_product_association" "portfolio_products" {
  for_each      = toset({ for s in var.aws_services : s.name => s.product_id })
  portfolio_id = aws_servicecatalog_portfolio.my_portfolio.id
  product_id    = each.value
}

# S3 Service
resource "aws_servicecatalog_cloudformation_product" "s3_product" {
  name         = "S3"
  owner        = "AWS"
  description  = "Amazon S3 - Simple Storage Service"
  provisioner  = "CloudFormation"
  provisioning_artifact_parameters {
    name          = "Default"
    description   = "Default version"
    info {
      load_template_from_url = "https://s3.amazonaws.com/cloudformation-templates-us-east-1/S3_Website_With_CloudFront.yaml"
    }
  }
}

# API Gateway Service
resource "aws_servicecatalog_cloudformation_product" "api_gateway_product" {
  name         = "API Gateway"
  owner        = "AWS"
  description  = "Amazon API Gateway"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for API Gateway
}

# Lambda Service
resource "aws_servicecatalog_cloudformation_product" "lambda_product" {
  name         = "Lambda"
  owner        = "AWS"
  description  = "AWS Lambda"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for Lambda
}

# DynamoDB Service
resource "aws_servicecatalog_cloudformation_product" "dynamodb_product" {
  name         = "DynamoDB"
  owner        = "AWS"
  description  = "Amazon DynamoDB"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for DynamoDB
}

# Certificate Manager Service
resource "aws_servicecatalog_cloudformation_product" "cert_manager_product" {
  name         = "Certificate Manager"
  owner        = "AWS"
  description  = "AWS Certificate Manager"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for Certificate Manager
}

# CloudWatch Service
resource "aws_servicecatalog_cloudformation_product" "cloudwatch_product" {
  name         = "CloudWatch"
  owner        = "AWS"
  description  = "Amazon CloudWatch"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for CloudWatch
}

# CloudTrail Service
resource "aws_servicecatalog_cloudformation_product" "cloudtrail_product" {
  name         = "CloudTrail"
  owner        = "AWS"
  description  = "AWS CloudTrail"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for CloudTrail
}

# VPC Service
resource "aws_servicecatalog_cloudformation_product" "vpc_product" {
  name         = "VPC"
  owner        = "AWS"
  description  = "Amazon Virtual Private Cloud (VPC)"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for VPC
}

# VPC Endpoint Service
resource "aws_servicecatalog_cloudformation_product" "vpce_product" {
  name         = "VPC Endpoint"
  owner        = "AWS"
  description  = "Amazon VPC Endpoint"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for VPC Endpoint
}

# Subnet Service
resource "aws_servicecatalog_cloudformation_product" "subnet_product" {
  name         = "Subnet"
  owner        = "AWS"
  description  = "Amazon VPC Subnet"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for Subnet
}

# IAM Service
resource "aws_servicecatalog_cloudformation_product" "iam_product" {
  name         = "IAM"
  owner        = "AWS"
  description  = "AWS Identity and Access Management (IAM)"
  provisioner  = "CloudFormation"
  # Add the necessary configuration for IAM
}



===============================================================================
aws_services = [
  { name = "S3", product_id = aws_servicecatalog_cloudformation_product.s3_product.id },
  { name = "API Gateway", product_id = aws_servicecatalog_cloudformation_product.api_gateway_product.id },
  { name = "Lambda", product_id = aws_servicecatalog_cloudformation_product.lambda_product.id },
  { name = "DynamoDB", product_id = aws_servicecatalog_cloudformation_product.dynamodb_product.id },
  { name = "Certificate Manager", product_id = aws_servicecatalog_cloudformation_product.cert_manager_product.id },
  { name = "CloudWatch", product_id = aws_servicecatalog_cloudformation_product.cloudwatch_product.id },
  { name = "CloudTrail", product_id = aws_servicecatalog_cloudformation_product.cloudtrail_product.id },
  { name = "VPC", product_id = aws_servicecatalog_cloudformation_product.vpc_product.id },
  { name = "VPC Endpoint", product_id = aws_servicecatalog_cloudformation_product.vpce_product.id },
  { name = "Subnet", product_id = aws_servicecatalog_cloudformation_product.subnet_product.id },
  { name = "IAM", product_id = aws_servicecatalog_cloudformation_product.iam_product.id },
]

=======================================================
=provider "aws" {
  region = var.region
}

variable "region" {
  description = "AWS region for deployment"
  type        = string
  default     = "us-east-1" # Change this to your desired AWS region
}

variable "company_name" {
  description = "Name of your company"
  type        = string
  default     = "Your Company"
}

variable "services" {
  description = "List of service configurations"
  type        = list(object({
    type                 = string
    name                 = string
    bucket_name          = string
    lambda_function_name = string
    vpc_id               = string
    api_name             = string
    certificate_name     = string
    subnet_id            = string
    dashboard_name       = string
    trail_name           = string
    vpc_endpoint_name    = string
    http_api_name        = string
  }))
}

# Dynamic resource creation
resource "aws_servicecatalog_portfolio" "organization_portfolio" {
  name          = "Organization Portfolio"
  display_name  = "Organization Portfolio"
  provider_name = var.company_name
}

resource "aws_servicecatalog_product" "organization_products" {
  for_each = { for service in var.services : service.name => service }

  name        = each.value.name
  owner       = var.company_name
  description = "Product description"

  provisioning_artifact {
    name        = "1.0.0"
    description = "Initial release"
    type        = each.value.type

    service_attributes = merge(
      {
        name          = each.value.name
        region        = var.region
        company_name  = var.company_name
      },
      each.value.type == "aws_s3_bucket" ? { bucket_name          = each.value.bucket_name } : {},
      each.value.type == "aws_lambda_function" ? { lambda_function_name = each.value.lambda_function_name } : {},
      each.value.type == "aws_vpc" ? { vpc_id               = each.value.vpc_id } : {},
      each.value.type == "aws_api_gateway_rest_api" ? { api_name             = each.value.api_name } : {},
      each.value.type == "aws_acm_certificate" ? { certificate_name     = each.value.certificate_name } : {},
      each.value.type == "aws_subnet" ? { subnet_id            = each.value.subnet_id } : {},
      each.value.type == "aws_cloudwatch_dashboard" ? { dashboard_name       = each.value.dashboard_name } : {},
      each.value.type == "aws_cloudtrail" ? { trail_name           = each.value.trail_name } : {},
      each.value.type == "aws_vpc_endpoint" ? { vpc_endpoint_name    = each.value.vpc_endpoint_name } : {},
      each.value.type == "aws_apigatewayv2_api" ? { http_api_name        = each.value.http_api_name } : {},
    )
  }

  tags = {
    # Add your product tags here
  }

  portfolio_id = aws_servicecatalog_portfolio.organization_portfolio.id
}




==============================================================================
provisioning_artifact {
    name        = "1.0.0"
    description = "Initial release"
    info = {
      type                = each.value.type
      name                = each.value.name
      # Common attributes
      region              = var.region
      company_name        = var.company_name
      # Service-specific attributes
      bucket_name         = each.value.type == "aws_s3_bucket" ? each.value.bucket_name : null
      lambda_function_name = each.value.type == "aws_lambda_function" ? each.value.lambda_function_name : null
      vpc_id              = each.value.type == "aws_vpc" ? each.value.vpc_id : null
      api_name            = each.value.type == "aws_api_gateway_rest_api" ? each.value.api_name : null
      certificate_name    = each.value.type == "aws_acm_certificate" ? each.value.certificate_name : null
      subnet_id           = each.value.type == "aws_subnet" ? each.value.subnet_id : null
      dashboard_name      = each.value.type == "aws_cloudwatch_dashboard" ? each.value.dashboard_name : null
      trail_name          = each.value.type == "aws_cloudtrail" ? each.value.trail_name : null
      vpc_endpoint_name   = each.value.type == "aws_vpc_endpoint" ? each.value.vpc_endpoint_name : null
      http_api_name       = each.value.type == "aws_apigatewayv2_api" ? each.value.http_api_name : null
      # Add more attributes as needed based on your requirements
    }
}

Make sure to include the necessary attributes in your variables.tfvars file for the HTTP API service:

hcl

region       = "us-west-2"
company_name = "Your Company"
services = [
  {
    type                 = "aws_iam_role"
    name                 = "organization_iam_role"
    # Add IAM role configuration here
  },
  {
    type                 = "aws_lambda_function"
    name                 = "organization_lambda_function"
    lambda_function_name = "example_lambda_function"
    # Add Lambda function configuration here
  },
  {
    type          = "aws_s3_bucket"
    name          = "organization_bucket"
    bucket_name   = "example_bucket"
    # Add S3 bucket configuration here
  },
  {
    type                 = "aws_api_gateway_rest_api"
    name                 = "organization_api"
    api_name             = "example_api"
    # Add API Gateway configuration here
  },
  {
    type                 = "aws_acm_certificate"
    name                 = "organization_certificate"
    certificate_name     = "example_certificate"
    # Add ACM certificate configuration here
  },
  {
    type          = "aws_vpc"
    name          = "organization_vpc"
    vpc_id        = "example_vpc_id"
    # Add VPC configuration here
  },
  {
    type          = "aws_subnet"
    name          = "organization_subnet"
    subnet_id     = "example_subnet_id"
    # Add Subnet configuration here
  },
  {
    type                 = "aws_cloudwatch_dashboard"
    name                 = "organization_dashboard"
    dashboard_name       = "example_dashboard"
    # Add CloudWatch dashboard configuration here
  },
  {
    type                 = "aws_cloudtrail"
    name                 = "organization_trail"
    trail_name           = "example_trail"
    # Add CloudTrail configuration here
  },
  {
    type                 = "aws_vpc_endpoint"
    name                 = "organization_vpc_endpoint"
    vpc_endpoint_name    = "example_vpc_endpoint"
    # Add VPC Endpoint configuration here
  },
  {
    type                 = "aws_apigatewayv2_api"
    name                 = "organization_http_api"
    http_api_name        = "example_http_api"
    # Add HTTP API configuration here
  },
]

Adjust the attribute names and values based on your actual requirements for the HTTP API.

variable "region" {
  description = "AWS region for deployment"
  type        = string
  default     = "us-east-1" # Change this to your desired AWS region
}

variable "company_name" {
  description = "Name of your company"
  type        = string
  default     = "Your Company"
}

variable "services" {
  description = "List of service configurations"
  type        = list(object({
    type                 = string
    name                 = string
    # Add additional service-specific attributes here
    bucket_name          = string
    lambda_function_name = string
    vpc_id               = string
    api_name             = string
    certificate_name     = string
    subnet_id            = string
    dashboard_name       = string
    trail_name           = string
    vpc_endpoint_name    = string
    http_api_name        = string
  }))
}
================================
