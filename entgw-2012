main.tf

hcl

provider "aws" {
  region = var.aws_region
}

module "cognito" {
  source              = "./modules/cognito"
  user_pool_name      = "BU-user-pool"
  app_client_name     = "BU-app-client"
  allowed_oauth_flows = ["code"]
  oauth_scopes        = ["email", "openid", "profile"]
}

module "lambda" {
  source          = "./modules/lambda"
  function_name   = "BU-lambda-function"
  runtime         = "python3.8"
  handler         = "lambda_function.lambda_handler"
  lambda_filename = "path/to/your/lambda/function/zipfile.zip"
}

module "api_gateway" {
  source                = "./modules/api_gateway"
  api_name              = "BU-api"
  lambda_function_name  = module.lambda.function_name
  cognito_user_pool_id  = module.cognito.user_pool_id
  cognito_client_id     = module.cognito.user_pool_client_id
  oauth_scopes          = module.cognito.oauth_scopes
  allowed_oauth_flows   = module.cognito.allowed_oauth_flows
}

./modules/cognito/main.tf

hcl

variable "user_pool_name" {
  description = "Name of the Cognito User Pool"
  type        = string
}

variable "app_client_name" {
  description = "Name of the Cognito User Pool Client"
  type        = string
}

variable "allowed_oauth_flows" {
  description = "Allowed OAuth flows for the Cognito User Pool Client"
  type        = list(string)
}

variable "oauth_scopes" {
  description = "OAuth scopes for the Cognito User Pool Client"
  type        = list(string)
}

resource "aws_cognito_user_pool" "this" {
  name = var.user_pool_name

  # Other Cognito configuration...

  schema {
    attribute_data_type = "String"
    developer_only_attribute = false
    mutable = true
    name = "custom:role"
    required = false
    string_attribute_constraints {
      max_length = 100
      min_length = 1
    }
  }
}

resource "aws_cognito_user_pool_client" "this" {
  name                   = var.app_client_name
  user_pool_id           = aws_cognito_user_pool.this.id
  generate_secret        = true
  allowed_oauth_flows    = var.allowed_oauth_flows
  allowed_oauth_scopes   = var.oauth_scopes
  callback_urls          = ["https://example.com/callback"]
  logout_urls            = ["https://example.com/logout"]
  supported_identity_providers = ["COGNITO"]
}

output "user_pool_id" {
  value = aws_cognito_user_pool.this.id
}

output "user_pool_client_id" {
  value = aws_cognito_user_pool_client.this.id
}

output "oauth_scopes" {
  value = var.oauth_scopes
}

output "allowed_oauth_flows" {
  value = var.allowed_oauth_flows
}

./modules/lambda/main.tf

hcl

variable "function_name" {
  description = "Name of the Lambda function"
  type        = string
}

variable "runtime" {
  description = "Runtime for the Lambda function"
  type        = string
}

variable "handler" {
  description = "Handler for the Lambda function"
  type        = string
}

variable "lambda_filename" {
  description = "Filename for the Lambda function deployment package"
  type        = string
}

resource "aws_lambda_function" "this" {
  function_name = var.function_name
  runtime       = var.runtime
  handler       = var.handler
  filename      = var.lambda_filename
  role          = aws_iam_role.this.arn

  # Other Lambda configuration...
}

resource "aws_iam_role" "this" {
  name = "BU-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        },
      },
    ],
  })
}

resource "aws_iam_policy" "this" {
  name        = "BU-lambda-policy"
  description = "Policy for the Lambda function"

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action   = "logs:CreateLogGroup",
        Effect   = "Allow",
        Resource = "*",
      },
      {
        Action   = "logs:CreateLogStream",
        Effect   = "Allow",
        Resource = "*",
      },
      {
        Action   = "logs:PutLogEvents",
        Effect   = "Allow",
        Resource = "*",
      },
    ],
  })
}

resource "aws_iam_role_policy_attachment" "this" {
  policy_arn = aws_iam_policy.this.arn
  role       = aws_iam_role.this.name
}

output "function_name" {
  value = aws_lambda_function.this.function_name
}

./modules/api_gateway/main.tf

hcl

variable "api_name" {
  description = "Name of the API Gateway"
  type        = string
}

variable "lambda_function_name" {
  description = "Name of the Lambda function to integrate with"
  type        = string
}

variable "cognito_user_pool_id" {
  description = "ID of the Cognito User Pool"
  type        = string
}

variable "cognito_client_id" {
  description = "ID of the Cognito User Pool Client"
  type        = string
}

variable "oauth_scopes" {
  description = "OAuth scopes for the API Gateway"
  type        = list(string)
}

variable "allowed_oauth_flows" {
  description = "Allowed OAuth flows for the API Gateway"
  type        = list(string)
}

resource "aws_apigatewayv2_api" "this" {
  name          = var.api_name
  protocol_type = "HTTP"

  authorization {
    scopes               = var.oauth_scopes
    authorization_scopes = var.allowed_oauth_flows
    user_pool_arn        = aws_cognito_user_pool.this.arn
  }
}

resource "aws_apigatewayv2_integration" "this" {
  api_id             = aws_apigatewayv2_api.this.id
  integration_type   = "AWS_PROXY"
  integration_uri    = "arn:aws:apigateway:${var.aws_region}:lambda:path/2015-03-31/functions/${aws_lambda_function.this.arn}/invocations"
  integration_method = "POST"
  connection_type    = "INTERNET"
}

resource "aws_apigatewayv2_route" "this" {
  api_id    = aws_apigatewayv2_api.this.id
  route_key = "ANY /{proxy+}"

  target = "integrations/${aws_apigatewayv2_integration.this.id}"
}

output "api_invoke_url" {
  value = aws_apigatewayv2_api.this.api_endpoint
}

