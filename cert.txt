provider "aws" {
  region = "us-east-1"  # Change this to your desired AWS region
}

# Step 1: Create S3 Bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = "my-s3-bucket"  # Change this to your desired bucket name
  acl    = "private"
}

# Step 2: Create Lambda Function
resource "aws_lambda_function" "my_lambda_function" {
  function_name    = "my-lambda-function"  # Change this to your desired function name
  handler          = "index.handler"
  runtime          = "nodejs14.x"
  filename         = "path/to/your/lambda/zip/package.zip"  # Change this to your Lambda package path
  source_code_hash = filebase64("path/to/your/lambda/zip/package.zip")  # Change this to your Lambda package path

  role = aws_iam_role.lambda_execution_role.arn

  environment = {
    S3_BUCKET = aws_s3_bucket.my_bucket.bucket
  }
}

# IAM Role for Lambda Execution
resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      }
    }
  ]
}
EOF
}

# IAM Policy for Lambda Execution Role
resource "aws_iam_policy" "lambda_execution_policy" {
  name        = "lambda_execution_policy"
  description = "Policy for Lambda Execution Role"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "${aws_s3_bucket.my_bucket.arn}/*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}
EOF
}

# Attach Policy to Lambda Execution Role
resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  policy_arn = aws_iam_policy.lambda_execution_policy.arn
  role       = aws_iam_role.lambda_execution_role.name
}

# Step 3: Create ACM Certificate
resource "aws_acm_certificate" "my_certificate" {
  domain_name       = "example.com"  # Change this to your domain name
  validation_method = "DNS"
}

# Step 4: Create API Gateway
resource "aws_api_gateway_rest_api" "my_api" {
  name        = "my-api"
  description = "My API"
}

resource "aws_api_gateway_resource" "my_api_resource" {
  rest_api_id = aws_api_gateway_rest_api.my_api.id
  parent_id   = aws_api_gateway_rest_api.my_api.root_resource_id
  path_part   = "upload"
}

resource "aws_api_gateway_method" "my_api_method" {
  rest_api_id   = aws_api_gateway_rest_api.my_api.id
  resource_id   = aws_api_gateway_resource.my_api_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_lambda_permission" "my_lambda_permission" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.my_lambda_function.arn
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_api_gateway_rest_api.my_api.execution_arn}/*/*/*"
}

resource "aws_api_gateway_integration" "my_api_integration" {
  rest_api_id             = aws_api_gateway_rest_api.my_api.id
  resource_id             = aws_api_gateway_resource.my_api_resource.id
  http_method             = aws_api_gateway_method.my_api_method.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.my_lambda_function.invoke_arn
}

resource "aws_api_gateway_deployment" "my_api_deployment" {
  depends_on = [
    aws_lambda_permission.my_lambda_permission,
    aws_api_gateway_integration.my_api_integration
  ]

  rest_api_id = aws_api_gateway_rest_api.my_api.id
  stage_name  = "prod"
}

# Output the API Gateway URL
output "api_gateway_url" {
  value = aws_api_gateway_deployment.my_api_deployment.invoke_url
}

# Output the ACM Certificate ARN
output "certificate_arn" {
  value = aws_acm_certificate.my_certificate.arn
}
====================================================================================



Certainly! Below, I've organized the Terraform configuration into separate files for better modularity: main.tf, variables.tf, variables.tfvars, and outputs.tf. Additionally, I've introduced a module for the Lambda function to enhance modularity.
main.tf:

hcl

provider "aws" {
  region = var.aws_region
}

module "s3_lambda_acm_api_gateway" {
  source       = "./modules/s3_lambda_acm_api_gateway"
  bucket_name  = var.s3_bucket_name
  function_name = var.lambda_function_name
  domain_name   = var.acm_domain_name
  api_name      = var.api_gateway_name
}

variables.tf:

hcl

variable "aws_region" {
  description = "The AWS region"
}

variable "s3_bucket_name" {
  description = "Name of the S3 bucket"
}

variable "lambda_function_name" {
  description = "Name of the Lambda function"
}

variable "acm_domain_name" {
  description = "Domain name for ACM certificate"
}

variable "api_gateway_name" {
  description = "Name of the API Gateway"
}

variables.tfvars:

hcl

aws_region         = "us-east-1"  # Change this to your desired AWS region
s3_bucket_name     = "my-s3-bucket"  # Change this to your desired S3 bucket name
lambda_function_name = "my-lambda-function"  # Change this to your desired Lambda function name
acm_domain_name    = "example.com"  # Change this to your desired domain name for ACM
api_gateway_name   = "my-api"  # Change this to your desired API Gateway name

outputs.tf:

hcl

output "api_gateway_url" {
  value = module.s3_lambda_acm_api_gateway.api_gateway_url
}

output "certificate_arn" {
  value = module.s3_lambda_acm_api_gateway.certificate_arn
}

modules/s3_lambda_acm_api_gateway/main.tf (Module for S3, Lambda, ACM, and API Gateway):

hcl

variable "bucket_name" {
  description = "Name of the S3 bucket"
}

variable "function_name" {
  description = "Name of the Lambda function"
}

variable "domain_name" {
  description = "Domain name for ACM certificate"
}

variable "api_name" {
  description = "Name of the API Gateway"
}

provider "aws" {
  region = var.aws_region
}

# Step 1: Create S3 Bucket
resource "aws_s3_bucket" "my_bucket" {
  bucket = var.bucket_name
  acl    = "private"
}

# Step 2: Create Lambda Function
module "lambda_function" {
  source         = "./lambda_function"
  function_name  = var.function_name
  s3_bucket_name = aws_s3_bucket.my_bucket.bucket
}

# Step 3: Create ACM Certificate
resource "aws_acm_certificate" "my_certificate" {
  domain_name       = var.domain_name
  validation_method = "DNS"
}

# Step 4: Create API Gateway
resource "aws_api_gateway_rest_api" "my_api" {
  name        = var.api_name
  description = "My API"
}

resource "aws_api_gateway_resource" "my_api_resource" {
  rest_api_id = aws_api_gateway_rest_api.my_api.id
  parent_id   = aws_api_gateway_rest_api.my_api.root_resource_id
  path_part   = "upload"
}

resource "aws_api_gateway_method" "my_api_method" {
  rest_api_id   = aws_api_gateway_rest_api.my_api.id
  resource_id   = aws_api_gateway_resource.my_api_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_lambda_permission" "my_lambda_permission" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = module.lambda_function.lambda_function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_api_gateway_rest_api.my_api.execution_arn}/*/*/*"
}

resource "aws_api_gateway_integration" "my_api_integration" {
  rest_api_id             = aws_api_gateway_rest_api.my_api.id
  resource_id             = aws_api_gateway_resource.my_api_resource.id
  http_method             = aws_api_gateway_method.my_api_method.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = module.lambda_function.lambda_function_invoke_arn
}

resource "aws_api_gateway_deployment" "my_api_deployment" {
  depends_on = [
    aws_lambda_permission.my_lambda_permission,
    aws_api_gateway_integration.my_api_integration
  ]

  rest_api_id = aws_api_gateway_rest_api.my_api.id
  stage_name  = "prod"
}

# Output the API Gateway URL
output "api_gateway_url" {
  value = aws_api_gateway_deployment.my_api_deployment.invoke_url
}

# Output the ACM Certificate ARN
output "certificate_arn" {
  value = aws_acm_certificate.my_certificate.arn
}

====================================

modules/s3_lambda_acm_api_gateway/lambda_function/main.tf (Module for Lambda function):

hcl

variable "function_name" {
  description = "Name of the Lambda function"
}

variable "s3_bucket_name" {
  description = "Name of the S3 bucket"
}

provider "aws" {
  region = var.aws_region
}

# Step 2: Create Lambda Function
resource "aws_lambda_function" "my_lambda_function" {
  function_name    = var.function_name
  handler          = "index.handler"
  runtime          = "nodejs14.x"
  filename         = "path/to/your/lambda/zip/package.zip"  # Change this to your Lambda package path
  source_code_hash = filebase64("path/to/your/lambda/zip/package.zip")  # Change this to your Lambda package path

  role = aws_iam_role.lambda_execution_role.arn

  environment = {
    S3_BUCKET = var.s3_bucket_name
  }
}

# IAM Role for Lambda Execution
resource "aws_iam_role" "lambda_execution_role" {
  name = "lambda_execution_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      }
    }
  ]
}
EOF
}

# IAM Policy for Lambda Execution Role
resource "aws_iam_policy" "lambda_execution_policy" {
  name        = "lambda_execution_policy"
  description = "Policy for Lambda Execution Role"

  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetObject"
      ],
      "Resource": [
        "${aws_s3_bucket.my_bucket.arn}/*"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
      ],
      "Resource": "*"
    }
  ]
}
EOF
}

# Attach Policy to Lambda Execution Role
resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
  policy_arn = aws_iam_policy.lambda_execution_policy.arn
  role       = aws_iam_role.lambda_execution_role.name
}

# Output the Lambda function ARN and Invoke ARN
output "lambda_function_arn" {
  value = aws_lambda_function.my_lambda_function.arn
}

output "lambda_function_invoke_arn" {
  value = aws_lambda_function.my_lambda_function.invoke_arn
}

Make sure to replace the placeholder values in these files with your specific configurations. The directory structure should look like this:

css

project-root/
├── main.tf
├── variables.tf
├── variables.tfvars
├── outputs.tf
└── modules/
    └── s3_lambda_acm_api_gateway/
        ├── main.tf
        └── lambda_function/
            └── main.tf
==========================================