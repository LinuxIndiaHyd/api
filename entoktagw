Project Structure:

plaintext

project
│   main.tf
│   variables.tf
│   outputs.tf
│   terraform.tfvars
│
└───modules
    ├───aws-waf
    │       main.tf
    │       variables.tf
    │       outputs.tf
    │
    ├───aws-cognito
    │       main.tf
    │       variables.tf
    │       outputs.tf
    │
    ├───dynamodb
    │       main.tf
    │       variables.tf
    │       outputs.tf
    │
    ├───http-api-gateway
    │       main.tf
    │       variables.tf
    │       outputs.tf
    │
    └───lambda
            main.tf
            variables.tf
            outputs.tf

variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "okta_domain" {
  description = "Okta domain"
}

variable "cognito_pool_name" {
  description = "Cognito User Pool Name"
}

variable "dynamodb_table_name" {
  description = "DynamoDB Table Name"
}

variable "http_api_name" {
  description = "HTTP API Gateway Name"
}

variable "lambda_function_name" {
  description = "Lambda Function Name"
}

main.tf

hcl

provider "aws" {
  region = var.aws_region
}

module "aws_waf" {
  source         = "./modules/aws-waf"
  okta_domain    = var.okta_domain
}

module "aws_cognito" {
  source             = "./modules/aws-cognito"
  cognito_pool_name = var.cognito_pool_name
  okta_domain       = var.okta_domain
}

module "dynamodb" {
  source          = "./modules/dynamodb"
  table_name      = var.dynamodb_table_name
  cognito_pool_id = module.aws_cognito.cognito_pool_id
}

module "http_api_gateway" {
  source             = "./modules/http-api-gateway"
  api_name           = var.http_api_name
  cognito_pool_id    = module.aws_cognito.cognito_pool_id
  lambda_function_id = module.lambda.lambda_function_id
}

module "lambda" {
  source             = "./modules/lambda"
  function_name      = var.lambda_function_name
  dynamodb_table     = module.dynamodb.dynamodb_table
}

terraform.tfvars

hcl

aws_region            = "us-east-1"
okta_domain           = "your-okta-domain"
cognito_pool_name     = "your-cognito-pool-name"
dynamodb_table_name   = "your-dynamodb-table-name"
http_api_name         = "your-http-api-name"
lambda_function_name  = "your-lambda-function-name"

This is a basic structure to get you started. You would need to fill in the details and expand each module's implementation based on your specific requirements. It's also crucial to consider security aspects and fine-tune the IAM roles and policies for each component.
User
so now give me each modules terraform code
ChatGPT

Certainly! Below is a simplified version of the Terraform code for each module. Please note that you may need to customize it according to your specific requirements, especially regarding security, IAM roles, and policies.
Module: modules/aws-waf/main.tf

hcl

provider "aws" {
  region = var.aws_region
}

resource "aws_wafregional_web_acl" "okta_waf_acl" {
  name        = "okta-waf-acl"
  metric_name = "oktaWafACL"

  default_action {
    type = "BLOCK"
  }

  rule {
    name        = "okta-rule"
    priority    = 1
    action      = "BLOCK"
    override_action {
      type = "NONE"
    }
    rule_action {
      type = "BLOCK"
    }
    type        = "REGULAR"
    match {
      text_transformation {
        priority = 0
        type     = "NONE"
      }

      byte_match {
        field_to_match {
          type  = "HEADER"
          data  = "Authorization"
        }
        positional_constraint = "CONTAINS"
        target_string         = "Okta"
      }
    }
  }
}

output "web_acl_id" {
  value = aws_wafregional_web_acl.okta_waf_acl.id
}

Module: modules/aws-cognito/main.tf

hcl

provider "aws" {
  region = var.aws_region
}

resource "aws_cognito_user_pool" "okta_cognito_pool" {
  name = var.cognito_pool_name

  schema {
    attribute_data_type = "String"
    name                = "username"
    required            = true
  }

  alias_attributes     = ["email"]
  auto_verified_attributes = ["email"]

  password_policy {
    minimum_length    = 8
    require_lowercase = false
    require_numbers   = false
    require_symbols   = false
    require_uppercase = false
  }

  verification_message_template {
    default_email_option = "CONFIRM_WITH_LINK"
  }

  admin_create_user_config {
    allow_admin_create_user_only = false
  }

  lambda_config {
    create_auth_challenge = "arn:aws:lambda:us-east-1:123456789012:function:createAuthChallenge"
  }

  tags = {
    Name = "okta-cognito-pool"
  }
}

output "cognito_pool_id" {
  value = aws_cognito_user_pool.okta_cognito_pool.id
}

Module: modules/dynamodb/main.tf

hcl

provider "aws" {
  region = var.aws_region
}

resource "aws_dynamodb_table" "okta_dynamodb_table" {
  name           = var.dynamodb_table_name
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "userId"
  stream_enabled = false

  attribute {
    name = "userId"
    type = "S"
  }

  attribute {
    name = "data"
    type = "S"
  }

  global_secondary_index {
    name               = "UserIdIndex"
    hash_key           = "userId"
    projection_type    = "ALL"
    read_capacity      = 5
    write_capacity     = 5
  }
}

output "dynamodb_table" {
  value = aws_dynamodb_table.okta_dynamodb_table
}

Module: modules/http-api-gateway/main.tf

hcl

provider "aws" {
  region = var.aws_region
}

resource "aws_apigatewayv2_api" "okta_http_api" {
  name          = var.api_name
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_integration" "okta_lambda_integration" {
  api_id             = aws_apigatewayv2_api.okta_http_api.id
  integration_type  = "AWS_PROXY"
  integration_uri   = module.lambda.lambda_invoke_url
  integration_method = "POST"
}

resource "aws_apigatewayv2_route" "okta_lambda_route" {
  api_id    = aws_apigatewayv2_api.okta_http_api.id
  route_key = "$default"
  target    = aws_apigatewayv2_integration.okta_lambda_integration.id
}

resource "aws_apigatewayv2_authorizer" "okta_cognito_authorizer" {
  api_id        = aws_apigatewayv2_api.okta_http_api.id
  name          = "okta-cognito-authorizer"
  authorizer_type = "JWT"
  identity_sources = ["$request.header.Authorization"]
  jwt_configuration {
    issuer      = aws_cognito_user_pool.okta_cognito_pool.endpoint
    audience    = [aws_cognito_user_pool.okta_cognito_pool.client_id]
  }
}

output "http_api_id" {
  value = aws_apigatewayv2_api.okta_http_api.id
}

Module: modules/lambda/main.tf

hcl

provider "aws" {
  region = var.aws_region
}

resource "aws_lambda_function" "okta_lambda_function" {
  function_name = var.function_name
  runtime       = "python3.8"
  handler       = "lambda_function.lambda_handler"
  filename      = "path/to/your/lambda.zip"  # replace with the actual path
  role          = aws_iam_role.okta_lambda_role.arn

  environment {
    variables = {
      DYNAMODB_TABLE_NAME = module.dynamodb.dynamodb_table.name
    }
  }
}

resource "aws_iam_role" "okta_lambda_role" {
  name = "okta-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_lambda_permission" "okta_lambda_permission" {
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.okta_lambda_function.arn
  principal     = "apigateway.amazonaws.com"
  source_arn    = aws_apigatewayv2_api.okta_http_api.execution_arn
}

output "lambda_function_id" {
  value = aws_lambda_function.okta_lambda_function.arn
}

output "lambda_invoke_url" {
  value = aws_apigatewayv2_api.okta_http_api.api_endpoint
}

This is a basic setup, and you should customize it based on your specific requirements, including security considerations, IAM roles, and policies. Ensure that you replace placeholder values with your actual configuration and modify it according to your needs.
User
now give me each modules variables.tf and outputs.tf
ChatGPT

Certainly! Below are the variables.tf and outputs.tf files for each module:
Module: modules/aws-waf/variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "okta_domain" {
  description = "Okta domain"
}

Module: modules/aws-waf/outputs.tf

hcl

output "web_acl_id" {
  description = "ID of the created WAF Web ACL"
  value       = aws_wafregional_web_acl.okta_waf_acl.id
}

Module: modules/aws-cognito/variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "cognito_pool_name" {
  description = "Cognito User Pool Name"
}

variable "okta_domain" {
  description = "Okta domain"
}

Module: modules/aws-cognito/outputs.tf

hcl

output "cognito_pool_id" {
  description = "ID of the created Cognito User Pool"
  value       = aws_cognito_user_pool.okta_cognito_pool.id
}

Module: modules/dynamodb/variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "dynamodb_table_name" {
  description = "DynamoDB Table Name"
}

Module: modules/dynamodb/outputs.tf

hcl

output "dynamodb_table" {
  description = "The DynamoDB Table resource"
  value       = aws_dynamodb_table.okta_dynamodb_table
}

Module: modules/http-api-gateway/variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "api_name" {
  description = "HTTP API Gateway Name"
}

Module: modules/http-api-gateway/outputs.tf

hcl

output "http_api_id" {
  description = "ID of the created HTTP API Gateway"
  value       = aws_apigatewayv2_api.okta_http_api.id
}

Module: modules/lambda/variables.tf

hcl

variable "aws_region" {
  description = "AWS region"
}

variable "function_name" {
  description = "Lambda Function Name"
}

Module: modules/lambda/outputs.tf

hcl

output "lambda_function_id" {
  description = "ID of the created Lambda Function"
  value       = aws_lambda_function.okta_lambda_function.arn
}

output "lambda_invoke_url" {
  description = "Invoke URL of the created Lambda Function"
  value       = aws_apigatewayv2_api.okta_http_api.api_endpoint
}

Ensure that you customize these variables and outputs according to your specific use case and requirements.
